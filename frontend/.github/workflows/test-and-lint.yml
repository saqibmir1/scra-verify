name: Test and Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run TypeScript check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend (test)
        working-directory: ./frontend
        run: npm run build

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install backend dependencies
        working-directory: ./backend
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install Playwright browsers
        working-directory: ./backend
        run: |
          poetry run playwright install chromium
          poetry run playwright install-deps

      - name: Lint backend with ruff (if available)
        working-directory: ./backend
        run: |
          if poetry show ruff &> /dev/null; then
            poetry run ruff check .
          else
            echo "Ruff not installed, skipping lint"
          fi
        continue-on-error: true

      - name: Type check with mypy (if available)
        working-directory: ./backend
        run: |
          if poetry show mypy &> /dev/null; then
            poetry run mypy . --ignore-missing-imports
          else
            echo "MyPy not installed, skipping type check"
          fi
        continue-on-error: true